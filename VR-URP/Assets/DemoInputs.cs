//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/DemoInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DemoInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DemoInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DemoInputs"",
    ""maps"": [
        {
            ""name"": ""XR Interaction"",
            ""id"": ""be00484f-e207-4324-bc83-21858d915670"",
            ""actions"": [
                {
                    ""name"": ""Delete Left"",
                    ""type"": ""Button"",
                    ""id"": ""2d84d973-8947-4b45-8252-b0026f167e77"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Delete Right"",
                    ""type"": ""Button"",
                    ""id"": ""c7e4997b-98fc-48b9-95cb-972059d0052e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dd870603-3f87-404d-9692-4513876a14c1"",
                    ""path"": ""<XRController>{LeftHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2a20202f-1d24-4a92-8a23-cf134d16b36e"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delete Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XR Interaction
        m_XRInteraction = asset.FindActionMap("XR Interaction", throwIfNotFound: true);
        m_XRInteraction_DeleteLeft = m_XRInteraction.FindAction("Delete Left", throwIfNotFound: true);
        m_XRInteraction_DeleteRight = m_XRInteraction.FindAction("Delete Right", throwIfNotFound: true);
    }

    ~@DemoInputs()
    {
        UnityEngine.Debug.Assert(!m_XRInteraction.enabled, "This will cause a leak and performance issues, DemoInputs.XRInteraction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XR Interaction
    private readonly InputActionMap m_XRInteraction;
    private List<IXRInteractionActions> m_XRInteractionActionsCallbackInterfaces = new List<IXRInteractionActions>();
    private readonly InputAction m_XRInteraction_DeleteLeft;
    private readonly InputAction m_XRInteraction_DeleteRight;
    public struct XRInteractionActions
    {
        private @DemoInputs m_Wrapper;
        public XRInteractionActions(@DemoInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @DeleteLeft => m_Wrapper.m_XRInteraction_DeleteLeft;
        public InputAction @DeleteRight => m_Wrapper.m_XRInteraction_DeleteRight;
        public InputActionMap Get() { return m_Wrapper.m_XRInteraction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(XRInteractionActions set) { return set.Get(); }
        public void AddCallbacks(IXRInteractionActions instance)
        {
            if (instance == null || m_Wrapper.m_XRInteractionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRInteractionActionsCallbackInterfaces.Add(instance);
            @DeleteLeft.started += instance.OnDeleteLeft;
            @DeleteLeft.performed += instance.OnDeleteLeft;
            @DeleteLeft.canceled += instance.OnDeleteLeft;
            @DeleteRight.started += instance.OnDeleteRight;
            @DeleteRight.performed += instance.OnDeleteRight;
            @DeleteRight.canceled += instance.OnDeleteRight;
        }

        private void UnregisterCallbacks(IXRInteractionActions instance)
        {
            @DeleteLeft.started -= instance.OnDeleteLeft;
            @DeleteLeft.performed -= instance.OnDeleteLeft;
            @DeleteLeft.canceled -= instance.OnDeleteLeft;
            @DeleteRight.started -= instance.OnDeleteRight;
            @DeleteRight.performed -= instance.OnDeleteRight;
            @DeleteRight.canceled -= instance.OnDeleteRight;
        }

        public void RemoveCallbacks(IXRInteractionActions instance)
        {
            if (m_Wrapper.m_XRInteractionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IXRInteractionActions instance)
        {
            foreach (var item in m_Wrapper.m_XRInteractionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRInteractionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public XRInteractionActions @XRInteraction => new XRInteractionActions(this);
    public interface IXRInteractionActions
    {
        void OnDeleteLeft(InputAction.CallbackContext context);
        void OnDeleteRight(InputAction.CallbackContext context);
    }
}
